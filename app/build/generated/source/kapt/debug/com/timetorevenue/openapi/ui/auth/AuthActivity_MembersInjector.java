// Generated by Dagger (https://dagger.dev).
package com.timetorevenue.openapi.ui.auth;

import androidx.fragment.app.FragmentFactory;
import androidx.lifecycle.ViewModelProvider;
import com.timetorevenue.openapi.session.SessionManager;
import com.timetorevenue.openapi.ui.BaseActivity_MembersInjector;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthActivity_MembersInjector implements MembersInjector<AuthActivity> {
  private final Provider<SessionManager> sessionManagerProvider;

  private final Provider<FragmentFactory> fragmentFactoryProvider;

  private final Provider<ViewModelProvider.Factory> providerFactoryProvider;

  public AuthActivity_MembersInjector(Provider<SessionManager> sessionManagerProvider,
      Provider<FragmentFactory> fragmentFactoryProvider,
      Provider<ViewModelProvider.Factory> providerFactoryProvider) {
    this.sessionManagerProvider = sessionManagerProvider;
    this.fragmentFactoryProvider = fragmentFactoryProvider;
    this.providerFactoryProvider = providerFactoryProvider;
  }

  public static MembersInjector<AuthActivity> create(
      Provider<SessionManager> sessionManagerProvider,
      Provider<FragmentFactory> fragmentFactoryProvider,
      Provider<ViewModelProvider.Factory> providerFactoryProvider) {
    return new AuthActivity_MembersInjector(sessionManagerProvider, fragmentFactoryProvider, providerFactoryProvider);}

  @Override
  public void injectMembers(AuthActivity instance) {
    BaseActivity_MembersInjector.injectSessionManager(instance, sessionManagerProvider.get());
    injectFragmentFactory(instance, fragmentFactoryProvider.get());
    injectProviderFactory(instance, providerFactoryProvider.get());
  }

  @InjectedFieldSignature("com.timetorevenue.openapi.ui.auth.AuthActivity.fragmentFactory")
  public static void injectFragmentFactory(AuthActivity instance, FragmentFactory fragmentFactory) {
    instance.fragmentFactory = fragmentFactory;
  }

  @InjectedFieldSignature("com.timetorevenue.openapi.ui.auth.AuthActivity.providerFactory")
  public static void injectProviderFactory(AuthActivity instance,
      ViewModelProvider.Factory providerFactory) {
    instance.providerFactory = providerFactory;
  }
}
