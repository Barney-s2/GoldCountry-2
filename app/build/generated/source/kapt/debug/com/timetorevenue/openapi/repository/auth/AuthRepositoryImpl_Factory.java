// Generated by Dagger (https://dagger.dev).
package com.timetorevenue.openapi.repository.auth;

import android.content.SharedPreferences;
import com.timetorevenue.openapi.api.auth.OpenApiAuthService;
import com.timetorevenue.openapi.persistence.AccountPropertiesDao;
import com.timetorevenue.openapi.persistence.AuthTokenDao;
import com.timetorevenue.openapi.session.SessionManager;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AuthRepositoryImpl_Factory implements Factory<AuthRepositoryImpl> {
  private final Provider<AuthTokenDao> authTokenDaoProvider;

  private final Provider<AccountPropertiesDao> accountPropertiesDaoProvider;

  private final Provider<OpenApiAuthService> openApiAuthServiceProvider;

  private final Provider<SessionManager> sessionManagerProvider;

  private final Provider<SharedPreferences> sharedPreferencesProvider;

  private final Provider<SharedPreferences.Editor> sharedPrefsEditorProvider;

  public AuthRepositoryImpl_Factory(Provider<AuthTokenDao> authTokenDaoProvider,
      Provider<AccountPropertiesDao> accountPropertiesDaoProvider,
      Provider<OpenApiAuthService> openApiAuthServiceProvider,
      Provider<SessionManager> sessionManagerProvider,
      Provider<SharedPreferences> sharedPreferencesProvider,
      Provider<SharedPreferences.Editor> sharedPrefsEditorProvider) {
    this.authTokenDaoProvider = authTokenDaoProvider;
    this.accountPropertiesDaoProvider = accountPropertiesDaoProvider;
    this.openApiAuthServiceProvider = openApiAuthServiceProvider;
    this.sessionManagerProvider = sessionManagerProvider;
    this.sharedPreferencesProvider = sharedPreferencesProvider;
    this.sharedPrefsEditorProvider = sharedPrefsEditorProvider;
  }

  @Override
  public AuthRepositoryImpl get() {
    return newInstance(authTokenDaoProvider.get(), accountPropertiesDaoProvider.get(), openApiAuthServiceProvider.get(), sessionManagerProvider.get(), sharedPreferencesProvider.get(), sharedPrefsEditorProvider.get());
  }

  public static AuthRepositoryImpl_Factory create(Provider<AuthTokenDao> authTokenDaoProvider,
      Provider<AccountPropertiesDao> accountPropertiesDaoProvider,
      Provider<OpenApiAuthService> openApiAuthServiceProvider,
      Provider<SessionManager> sessionManagerProvider,
      Provider<SharedPreferences> sharedPreferencesProvider,
      Provider<SharedPreferences.Editor> sharedPrefsEditorProvider) {
    return new AuthRepositoryImpl_Factory(authTokenDaoProvider, accountPropertiesDaoProvider, openApiAuthServiceProvider, sessionManagerProvider, sharedPreferencesProvider, sharedPrefsEditorProvider);
  }

  public static AuthRepositoryImpl newInstance(AuthTokenDao authTokenDao,
      AccountPropertiesDao accountPropertiesDao, OpenApiAuthService openApiAuthService,
      SessionManager sessionManager, SharedPreferences sharedPreferences,
      SharedPreferences.Editor sharedPrefsEditor) {
    return new AuthRepositoryImpl(authTokenDao, accountPropertiesDao, openApiAuthService, sessionManager, sharedPreferences, sharedPrefsEditor);
  }
}
