// Generated by Dagger (https://dagger.dev).
package com.timetorevenue.openapi.di;

import android.app.Application;
import android.content.SharedPreferences;
import androidx.fragment.app.FragmentFactory;
import androidx.lifecycle.ViewModel;
import com.bumptech.glide.RequestManager;
import com.bumptech.glide.request.RequestOptions;
import com.google.errorprone.annotations.CanIgnoreReturnValue;
import com.google.gson.Gson;
import com.timetorevenue.openapi.api.auth.OpenApiAuthService;
import com.timetorevenue.openapi.api.main.OpenApiMainService;
import com.timetorevenue.openapi.di.auth.AuthComponent;
import com.timetorevenue.openapi.di.auth.AuthFragmentsModule_ProvideFragmentFactoryFactory;
import com.timetorevenue.openapi.di.auth.AuthModule_ProvideAuthRepositoryFactory;
import com.timetorevenue.openapi.di.auth.AuthModule_ProvideOpenApiAuthServiceFactory;
import com.timetorevenue.openapi.di.main.MainComponent;
import com.timetorevenue.openapi.di.main.MainFragmentsModule_ProvideAccountFragmentFactoryFactory;
import com.timetorevenue.openapi.di.main.MainFragmentsModule_ProvideBlogFragmentFactoryFactory;
import com.timetorevenue.openapi.di.main.MainFragmentsModule_ProvideCreateBlogFragmentFactoryFactory;
import com.timetorevenue.openapi.di.main.MainModule_ProvideBlogPostDaoFactory;
import com.timetorevenue.openapi.di.main.MainModule_ProvideBlogRepositoryFactory;
import com.timetorevenue.openapi.di.main.MainModule_ProvideCreateBlogRepositoryFactory;
import com.timetorevenue.openapi.di.main.MainModule_ProvideOpenApiMainServiceFactory;
import com.timetorevenue.openapi.persistence.AccountPropertiesDao;
import com.timetorevenue.openapi.persistence.AppDatabase;
import com.timetorevenue.openapi.persistence.AuthTokenDao;
import com.timetorevenue.openapi.persistence.BlogPostDao;
import com.timetorevenue.openapi.repository.auth.AuthRepository;
import com.timetorevenue.openapi.repository.main.AccountRepositoryImpl;
import com.timetorevenue.openapi.repository.main.AccountRepositoryImpl_Factory;
import com.timetorevenue.openapi.repository.main.BlogRepositoryImpl;
import com.timetorevenue.openapi.repository.main.CreateBlogRepositoryImpl;
import com.timetorevenue.openapi.session.SessionManager;
import com.timetorevenue.openapi.session.SessionManager_Factory;
import com.timetorevenue.openapi.ui.BaseActivity;
import com.timetorevenue.openapi.ui.BaseActivity_MembersInjector;
import com.timetorevenue.openapi.ui.auth.AuthActivity;
import com.timetorevenue.openapi.ui.auth.AuthActivity_MembersInjector;
import com.timetorevenue.openapi.ui.auth.AuthViewModel;
import com.timetorevenue.openapi.ui.auth.AuthViewModel_Factory;
import com.timetorevenue.openapi.ui.main.MainActivity;
import com.timetorevenue.openapi.ui.main.MainActivity_MembersInjector;
import com.timetorevenue.openapi.ui.main.account.AccountViewModel;
import com.timetorevenue.openapi.ui.main.account.AccountViewModel_Factory;
import com.timetorevenue.openapi.ui.main.blog.viewmodel.BlogViewModel;
import com.timetorevenue.openapi.ui.main.blog.viewmodel.BlogViewModel_Factory;
import com.timetorevenue.openapi.ui.main.create_blog.CreateBlogViewModel;
import com.timetorevenue.openapi.ui.main.create_blog.CreateBlogViewModel_Factory;
import com.timetorevenue.openapi.viewmodels.AuthViewModelFactory;
import com.timetorevenue.openapi.viewmodels.AuthViewModelFactory_Factory;
import com.timetorevenue.openapi.viewmodels.MainViewModelFactory;
import com.timetorevenue.openapi.viewmodels.MainViewModelFactory_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<Application> applicationProvider;

  private Provider<AppDatabase> provideAppDbProvider;

  private Provider<AuthTokenDao> provideAuthTokenDaoProvider;

  private Provider<SessionManager> sessionManagerProvider;

  private Provider<AccountPropertiesDao> provideAccountPropertiesDaoProvider;

  private Provider<Gson> provideGsonBuilderProvider;

  private Provider<Retrofit.Builder> provideRetrofitBuilderProvider;

  private Provider<SharedPreferences> provideSharedPreferencesProvider;

  private Provider<SharedPreferences.Editor> provideSharedPrefsEditorProvider;

  private Provider<RequestOptions> provideRequestOptionsProvider;

  private Provider<RequestManager> provideGlideInstanceProvider;

  private DaggerAppComponent(Application applicationParam) {

    initialize(applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Application applicationParam) {
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideAppDbProvider = DoubleCheck.provider(AppModule_ProvideAppDbFactory.create(applicationProvider));
    this.provideAuthTokenDaoProvider = DoubleCheck.provider(AppModule_ProvideAuthTokenDaoFactory.create(provideAppDbProvider));
    this.sessionManagerProvider = DoubleCheck.provider(SessionManager_Factory.create(provideAuthTokenDaoProvider, applicationProvider));
    this.provideAccountPropertiesDaoProvider = DoubleCheck.provider(AppModule_ProvideAccountPropertiesDaoFactory.create(provideAppDbProvider));
    this.provideGsonBuilderProvider = DoubleCheck.provider(AppModule_ProvideGsonBuilderFactory.create());
    this.provideRetrofitBuilderProvider = DoubleCheck.provider(AppModule_ProvideRetrofitBuilderFactory.create(provideGsonBuilderProvider));
    this.provideSharedPreferencesProvider = DoubleCheck.provider(AppModule_ProvideSharedPreferencesFactory.create(applicationProvider));
    this.provideSharedPrefsEditorProvider = DoubleCheck.provider(AppModule_ProvideSharedPrefsEditorFactory.create(provideSharedPreferencesProvider));
    this.provideRequestOptionsProvider = DoubleCheck.provider(AppModule_ProvideRequestOptionsFactory.create());
    this.provideGlideInstanceProvider = DoubleCheck.provider(AppModule_ProvideGlideInstanceFactory.create(applicationProvider, provideRequestOptionsProvider));
  }

  @Override
  public SessionManager getSessionManager() {
    return sessionManagerProvider.get();}

  @Override
  public void inject(BaseActivity baseActivity) {
    injectBaseActivity(baseActivity);}

  @Override
  public AuthComponent.Factory authComponent() {
    return new AuthComponentFactory();}

  @Override
  public MainComponent.Factory mainComponent() {
    return new MainComponentFactory();}

  @CanIgnoreReturnValue
  private BaseActivity injectBaseActivity(BaseActivity instance) {
    BaseActivity_MembersInjector.injectSessionManager(instance, sessionManagerProvider.get());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(application);
    }
  }

  private final class AuthComponentFactory implements AuthComponent.Factory {
    @Override
    public AuthComponent create() {
      return new AuthComponentImpl();
    }
  }

  private final class AuthComponentImpl implements AuthComponent {
    private Provider<OpenApiAuthService> provideOpenApiAuthServiceProvider;

    private Provider<AuthRepository> provideAuthRepositoryProvider;

    private Provider<AuthViewModel> authViewModelProvider;

    private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

    private Provider<AuthViewModelFactory> authViewModelFactoryProvider;

    private Provider<FragmentFactory> provideFragmentFactoryProvider;

    private AuthComponentImpl() {

      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideOpenApiAuthServiceProvider = DoubleCheck.provider(AuthModule_ProvideOpenApiAuthServiceFactory.create(DaggerAppComponent.this.provideRetrofitBuilderProvider));
      this.provideAuthRepositoryProvider = DoubleCheck.provider(AuthModule_ProvideAuthRepositoryFactory.create(DaggerAppComponent.this.sessionManagerProvider, DaggerAppComponent.this.provideAuthTokenDaoProvider, DaggerAppComponent.this.provideAccountPropertiesDaoProvider, provideOpenApiAuthServiceProvider, DaggerAppComponent.this.provideSharedPreferencesProvider, DaggerAppComponent.this.provideSharedPrefsEditorProvider));
      this.authViewModelProvider = DoubleCheck.provider(AuthViewModel_Factory.create(provideAuthRepositoryProvider));
      this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(1).put(AuthViewModel.class, (Provider) authViewModelProvider).build();
      this.authViewModelFactoryProvider = DoubleCheck.provider(AuthViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
      this.provideFragmentFactoryProvider = DoubleCheck.provider(AuthFragmentsModule_ProvideFragmentFactoryFactory.create((Provider) authViewModelFactoryProvider));
    }

    @Override
    public void inject(AuthActivity authActivity) {
      injectAuthActivity(authActivity);}

    @CanIgnoreReturnValue
    private AuthActivity injectAuthActivity(AuthActivity instance) {
      BaseActivity_MembersInjector.injectSessionManager(instance, DaggerAppComponent.this.sessionManagerProvider.get());
      AuthActivity_MembersInjector.injectFragmentFactory(instance, provideFragmentFactoryProvider.get());
      AuthActivity_MembersInjector.injectProviderFactory(instance, authViewModelFactoryProvider.get());
      return instance;
    }
  }

  private final class MainComponentFactory implements MainComponent.Factory {
    @Override
    public MainComponent create() {
      return new MainComponentImpl();
    }
  }

  private final class MainComponentImpl implements MainComponent {
    private Provider<OpenApiMainService> provideOpenApiMainServiceProvider;

    private Provider<AccountRepositoryImpl> accountRepositoryImplProvider;

    private Provider<AccountViewModel> accountViewModelProvider;

    private Provider<BlogPostDao> provideBlogPostDaoProvider;

    private Provider<BlogRepositoryImpl> provideBlogRepositoryProvider;

    private Provider<BlogViewModel> blogViewModelProvider;

    private Provider<CreateBlogRepositoryImpl> provideCreateBlogRepositoryProvider;

    private Provider<CreateBlogViewModel> createBlogViewModelProvider;

    private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>> mapOfClassOfAndProviderOfViewModelProvider;

    private Provider<MainViewModelFactory> mainViewModelFactoryProvider;

    private Provider<FragmentFactory> provideAccountFragmentFactoryProvider;

    private Provider<FragmentFactory> provideBlogFragmentFactoryProvider;

    private Provider<FragmentFactory> provideCreateBlogFragmentFactoryProvider;

    private MainComponentImpl() {

      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.provideOpenApiMainServiceProvider = DoubleCheck.provider(MainModule_ProvideOpenApiMainServiceFactory.create(DaggerAppComponent.this.provideRetrofitBuilderProvider));
      this.accountRepositoryImplProvider = DoubleCheck.provider(AccountRepositoryImpl_Factory.create(provideOpenApiMainServiceProvider, DaggerAppComponent.this.provideAccountPropertiesDaoProvider, DaggerAppComponent.this.sessionManagerProvider));
      this.accountViewModelProvider = DoubleCheck.provider(AccountViewModel_Factory.create(DaggerAppComponent.this.sessionManagerProvider, accountRepositoryImplProvider));
      this.provideBlogPostDaoProvider = DoubleCheck.provider(MainModule_ProvideBlogPostDaoFactory.create(DaggerAppComponent.this.provideAppDbProvider));
      this.provideBlogRepositoryProvider = DoubleCheck.provider(MainModule_ProvideBlogRepositoryFactory.create(provideOpenApiMainServiceProvider, provideBlogPostDaoProvider, DaggerAppComponent.this.sessionManagerProvider));
      this.blogViewModelProvider = DoubleCheck.provider(BlogViewModel_Factory.create(DaggerAppComponent.this.sessionManagerProvider, provideBlogRepositoryProvider, DaggerAppComponent.this.provideSharedPreferencesProvider, DaggerAppComponent.this.provideSharedPrefsEditorProvider));
      this.provideCreateBlogRepositoryProvider = DoubleCheck.provider(MainModule_ProvideCreateBlogRepositoryFactory.create(provideOpenApiMainServiceProvider, provideBlogPostDaoProvider, DaggerAppComponent.this.sessionManagerProvider));
      this.createBlogViewModelProvider = DoubleCheck.provider(CreateBlogViewModel_Factory.create(provideCreateBlogRepositoryProvider, DaggerAppComponent.this.sessionManagerProvider));
      this.mapOfClassOfAndProviderOfViewModelProvider = MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(3).put(AccountViewModel.class, (Provider) accountViewModelProvider).put(BlogViewModel.class, (Provider) blogViewModelProvider).put(CreateBlogViewModel.class, (Provider) createBlogViewModelProvider).build();
      this.mainViewModelFactoryProvider = DoubleCheck.provider(MainViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
      this.provideAccountFragmentFactoryProvider = DoubleCheck.provider(MainFragmentsModule_ProvideAccountFragmentFactoryFactory.create((Provider) mainViewModelFactoryProvider));
      this.provideBlogFragmentFactoryProvider = DoubleCheck.provider(MainFragmentsModule_ProvideBlogFragmentFactoryFactory.create((Provider) mainViewModelFactoryProvider, DaggerAppComponent.this.provideRequestOptionsProvider, DaggerAppComponent.this.provideGlideInstanceProvider));
      this.provideCreateBlogFragmentFactoryProvider = DoubleCheck.provider(MainFragmentsModule_ProvideCreateBlogFragmentFactoryFactory.create((Provider) mainViewModelFactoryProvider, DaggerAppComponent.this.provideGlideInstanceProvider));
    }

    @Override
    public void inject(MainActivity mainActivity) {
      injectMainActivity(mainActivity);}

    @CanIgnoreReturnValue
    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectSessionManager(instance, DaggerAppComponent.this.sessionManagerProvider.get());
      MainActivity_MembersInjector.injectAccountFragmentFactory(instance, provideAccountFragmentFactoryProvider.get());
      MainActivity_MembersInjector.injectBlogFragmentFactory(instance, provideBlogFragmentFactoryProvider.get());
      MainActivity_MembersInjector.injectCreateBlogFragmentFactory(instance, provideCreateBlogFragmentFactoryProvider.get());
      return instance;
    }
  }
}
