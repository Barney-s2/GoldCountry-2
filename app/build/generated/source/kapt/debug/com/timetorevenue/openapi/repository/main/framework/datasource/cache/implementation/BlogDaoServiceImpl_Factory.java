// Generated by Dagger (https://dagger.dev).
package com.timetorevenue.openapi.repository.main.framework.datasource.cache.implementation;

import com.timetorevenue.openapi.persistence.BlogPostDao;
import com.timetorevenue.openapi.repository.main.business.domain.util.DateUtil;
import dagger.internal.Factory;
import error.NonExistentClass;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BlogDaoServiceImpl_Factory implements Factory<BlogDaoServiceImpl> {
  private final Provider<BlogPostDao> blogPostDaoProvider;

  private final Provider<NonExistentClass> noteMapperProvider;

  private final Provider<DateUtil> dateUtilProvider;

  public BlogDaoServiceImpl_Factory(Provider<BlogPostDao> blogPostDaoProvider,
      Provider<NonExistentClass> noteMapperProvider, Provider<DateUtil> dateUtilProvider) {
    this.blogPostDaoProvider = blogPostDaoProvider;
    this.noteMapperProvider = noteMapperProvider;
    this.dateUtilProvider = dateUtilProvider;
  }

  @Override
  public BlogDaoServiceImpl get() {
    return newInstance(blogPostDaoProvider.get(), noteMapperProvider.get(), dateUtilProvider.get());
  }

  public static BlogDaoServiceImpl_Factory create(Provider<BlogPostDao> blogPostDaoProvider,
      Provider<NonExistentClass> noteMapperProvider, Provider<DateUtil> dateUtilProvider) {
    return new BlogDaoServiceImpl_Factory(blogPostDaoProvider, noteMapperProvider, dateUtilProvider);
  }

  public static BlogDaoServiceImpl newInstance(BlogPostDao blogPostDao, NonExistentClass noteMapper,
      DateUtil dateUtil) {
    return new BlogDaoServiceImpl(blogPostDao, noteMapper, dateUtil);
  }
}
