// Generated by Dagger (https://dagger.dev).
package com.timetorevenue.openapi.di.main;

import com.timetorevenue.openapi.api.main.OpenApiMainService;
import com.timetorevenue.openapi.persistence.AccountPropertiesDao;
import com.timetorevenue.openapi.repository.main.AccountRepository;
import com.timetorevenue.openapi.session.SessionManager;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainModule_ProvideAccountRepositoryFactory implements Factory<AccountRepository> {
  private final Provider<OpenApiMainService> openApiMainServiceProvider;

  private final Provider<AccountPropertiesDao> accountPropertiesDaoProvider;

  private final Provider<SessionManager> sessionManagerProvider;

  public MainModule_ProvideAccountRepositoryFactory(
      Provider<OpenApiMainService> openApiMainServiceProvider,
      Provider<AccountPropertiesDao> accountPropertiesDaoProvider,
      Provider<SessionManager> sessionManagerProvider) {
    this.openApiMainServiceProvider = openApiMainServiceProvider;
    this.accountPropertiesDaoProvider = accountPropertiesDaoProvider;
    this.sessionManagerProvider = sessionManagerProvider;
  }

  @Override
  public AccountRepository get() {
    return provideAccountRepository(openApiMainServiceProvider.get(), accountPropertiesDaoProvider.get(), sessionManagerProvider.get());
  }

  public static MainModule_ProvideAccountRepositoryFactory create(
      Provider<OpenApiMainService> openApiMainServiceProvider,
      Provider<AccountPropertiesDao> accountPropertiesDaoProvider,
      Provider<SessionManager> sessionManagerProvider) {
    return new MainModule_ProvideAccountRepositoryFactory(openApiMainServiceProvider, accountPropertiesDaoProvider, sessionManagerProvider);
  }

  public static AccountRepository provideAccountRepository(OpenApiMainService openApiMainService,
      AccountPropertiesDao accountPropertiesDao, SessionManager sessionManager) {
    return Preconditions.checkNotNull(MainModule.INSTANCE.provideAccountRepository(openApiMainService, accountPropertiesDao, sessionManager), "Cannot return null from a non-@Nullable @Provides method");
  }
}
