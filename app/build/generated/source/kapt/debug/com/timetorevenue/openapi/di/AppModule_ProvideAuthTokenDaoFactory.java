// Generated by Dagger (https://dagger.dev).
package com.timetorevenue.openapi.di;

import com.timetorevenue.openapi.persistence.AppDatabase;
import com.timetorevenue.openapi.persistence.AuthTokenDao;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideAuthTokenDaoFactory implements Factory<AuthTokenDao> {
  private final Provider<AppDatabase> dbProvider;

  public AppModule_ProvideAuthTokenDaoFactory(Provider<AppDatabase> dbProvider) {
    this.dbProvider = dbProvider;
  }

  @Override
  public AuthTokenDao get() {
    return provideAuthTokenDao(dbProvider.get());
  }

  public static AppModule_ProvideAuthTokenDaoFactory create(Provider<AppDatabase> dbProvider) {
    return new AppModule_ProvideAuthTokenDaoFactory(dbProvider);
  }

  public static AuthTokenDao provideAuthTokenDao(AppDatabase db) {
    return Preconditions.checkNotNull(AppModule.INSTANCE.provideAuthTokenDao(db), "Cannot return null from a non-@Nullable @Provides method");
  }
}
