// Generated by Dagger (https://dagger.dev).
package com.timetorevenue.openapi.ui.main;

import androidx.fragment.app.FragmentFactory;
import com.timetorevenue.openapi.session.SessionManager;
import com.timetorevenue.openapi.ui.BaseActivity_MembersInjector;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Named;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class MainActivity_MembersInjector implements MembersInjector<MainActivity> {
  private final Provider<SessionManager> sessionManagerProvider;

  private final Provider<FragmentFactory> accountFragmentFactoryProvider;

  private final Provider<FragmentFactory> blogFragmentFactoryProvider;

  private final Provider<FragmentFactory> createBlogFragmentFactoryProvider;

  public MainActivity_MembersInjector(Provider<SessionManager> sessionManagerProvider,
      Provider<FragmentFactory> accountFragmentFactoryProvider,
      Provider<FragmentFactory> blogFragmentFactoryProvider,
      Provider<FragmentFactory> createBlogFragmentFactoryProvider) {
    this.sessionManagerProvider = sessionManagerProvider;
    this.accountFragmentFactoryProvider = accountFragmentFactoryProvider;
    this.blogFragmentFactoryProvider = blogFragmentFactoryProvider;
    this.createBlogFragmentFactoryProvider = createBlogFragmentFactoryProvider;
  }

  public static MembersInjector<MainActivity> create(
      Provider<SessionManager> sessionManagerProvider,
      Provider<FragmentFactory> accountFragmentFactoryProvider,
      Provider<FragmentFactory> blogFragmentFactoryProvider,
      Provider<FragmentFactory> createBlogFragmentFactoryProvider) {
    return new MainActivity_MembersInjector(sessionManagerProvider, accountFragmentFactoryProvider, blogFragmentFactoryProvider, createBlogFragmentFactoryProvider);}

  @Override
  public void injectMembers(MainActivity instance) {
    BaseActivity_MembersInjector.injectSessionManager(instance, sessionManagerProvider.get());
    injectAccountFragmentFactory(instance, accountFragmentFactoryProvider.get());
    injectBlogFragmentFactory(instance, blogFragmentFactoryProvider.get());
    injectCreateBlogFragmentFactory(instance, createBlogFragmentFactoryProvider.get());
  }

  @InjectedFieldSignature("com.timetorevenue.openapi.ui.main.MainActivity.accountFragmentFactory")
  @Named("AccountFragmentFactory")
  public static void injectAccountFragmentFactory(MainActivity instance,
      FragmentFactory accountFragmentFactory) {
    instance.accountFragmentFactory = accountFragmentFactory;
  }

  @InjectedFieldSignature("com.timetorevenue.openapi.ui.main.MainActivity.blogFragmentFactory")
  @Named("BlogFragmentFactory")
  public static void injectBlogFragmentFactory(MainActivity instance,
      FragmentFactory blogFragmentFactory) {
    instance.blogFragmentFactory = blogFragmentFactory;
  }

  @InjectedFieldSignature("com.timetorevenue.openapi.ui.main.MainActivity.createBlogFragmentFactory")
  @Named("CreateBlogFragmentFactory")
  public static void injectCreateBlogFragmentFactory(MainActivity instance,
      FragmentFactory createBlogFragmentFactory) {
    instance.createBlogFragmentFactory = createBlogFragmentFactory;
  }
}
